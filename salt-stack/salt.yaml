AWSTemplateFormatVersion: 2010-09-09
Description: SaltStack Instances Creation

Parameters:
  ImageId:
    Description: AMI Id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings: 
  MInstanceMap: 
    Instancetype: 
      dev: "t2.small"
      test: "t2.small"
      uat: "t2.small"
      prod: "t2.small"
  WInstanceMap: 
    Instancetype: 
      dev: "t2.micro"
      test: "t2.micro"
      uat: "t2.micro"
      prod: "t2.micro"

Resources:
  Masternode:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [MInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: salt-master
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1
            hostname salt-master
            echo "salt-master"  >/etc/hostname
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt master configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "
            file_roots:
              base:
                - /srv/salt/base" >/etc/salt/master.d/roots.conf
            echo "master:  localhost" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d;salt-master -d
            sleep 60
            kill -9 $(pgrep salt-minion) $(pgrep salt-master)
            salt-minion -d;salt-master -d
            sleep 60
            echo "Y"|salt-key -A
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond


  Minion1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [WInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: minion1 
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1 
            hostname minion1 
            echo "minion1"  >/etc/hostname
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt minion configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "master: salt-master" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond

  Minion2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [WInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: minion2 
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1
            hostname minion2 
            echo "minion2"  >/etc/hostname
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt minion configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "master: salt-master" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${AWS::StackName}-SG"
      GroupDescription:
        Fn::Sub: "${AWS::StackName} SG"
      VpcId:
        Fn::ImportValue: MyVPCID
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  SGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
