AWSTemplateFormatVersion: 2010-09-09
Description: K8s Cluster Instances Creation

Parameters:
  ImageId:
    Description: AMI Id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings: 
  MInstanceMap: 
    Instancetype: 
      dev: "t2.medium"
      test: "t2.medium"
      uat: "t2.medium"
      prod: "t2.medium"
  WInstanceMap: 
    Instancetype: 
      dev: "t2.micro"
      test: "t2.micro"
      uat: "t2.micro"
      prod: "t2.micro"

Resources:
  Masternode:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [MInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: k8s-master
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            exec >/root/bootstrap.log 2>&1
            hostname k8s-master
            echo "k8s-master"  >/etc/hostname
            echo "
            alias c=clear
            alias kc=kubectl
            set -o vi" >>$HOME/.bash_profile
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt master configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "
            file_roots:
               base:
                 - /srv/salt/base" >/etc/salt/master.d/roots.conf
            echo "master:  localhost" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d;salt-master -d
            sleep 60
            kill -9 $(pgrep salt-minion) $(pgrep salt-master)
            salt-minion -d;salt-master -d
            sleep 60
            echo "Y"|salt-key -A
            systemctl enable docker && systemctl start docker
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            #### Kubernetes Installation & Configuration
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=0
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            exclude=kube*
            EOF
            cat <<EOF >  /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF
            setenforce 0
            sed -i ‘s/^SELINUX=enforcing$/SELINUX=permissive/’ /etc/selinux/config
            sed -i '/swap/d' /etc/fstab
            swapoff -a
            sysctl --system
            yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
            systemctl enable kubelet && systemctl start kubelet
            kubeadm init --pod-network-cidr=10.244.0.0/16
            mkdir -p /root/.kube
            cp -i /etc/kubernetes/admin.conf /root/.kube/config
            chown $(id -u):$(id -g) /root/.kube/config
            export KUBECONFIG=/etc/kubernetes/admin.conf
            sleep 30
            kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
            sleep 60
            grep 'kubeadm join' /root/bootstrap.log | sed 's|.$||g' >/tmp/$$.log
            grep 'discovery-token-ca-cert-hash' /root/bootstrap.log >>/tmp/$$.log
            d=$(cat /tmp/$$.log)
            echo $d >/tmp/$$.sh
            mkdir -p /srv/salt/base/scripts
            cp /tmp/$$.sh /srv/salt/base/scripts/file.sh
            salt 'k8s-worker1' cmd.script salt://scripts/file.sh
            salt 'k8s-worker2' cmd.script salt://scripts/file.sh
            sleep 30
            kubectl get nodes
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond
            echo "salt-minion -d;salt-master -d" >/etc/rc5.d/S20salt
            chmod 755 /etc/rc5.d/S20salt;cp -p /etc/rc5.d/S20salt /etc/rc3.d/S20salt
            #### Helm Installation
            curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3|bash
            echo 'End of Task'


  Workernode1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [WInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: k8s-worker1
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1 
            hostname k8s-worker1
            echo "k8s-worker1"  >/etc/hostname
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt minion configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "master: k8s-master" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d
            #### Kubernetes Install
            systemctl enable docker && systemctl start docker
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=0
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            exclude=kube*
            EOF
            cat <<EOF >  /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF
            sysctl --system
            yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
            systemctl enable kubelet && systemctl start kubelet
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond
            echo "salt-minion -d" >/etc/rc5.d/S20salt
            chmod 755 /etc/rc5.d/S20salt;cp -p /etc/rc5.d/S20salt /etc/rc3.d/S20salt
            echo 'End of task'


  Workernode2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType: !FindInMap [WInstanceMap, Instancetype, dev]
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Fn::ImportValue: PublicSubnet1ID
      Tags:
        - Key: Name
          Value: k8s-worker2
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -x
            exec >/root/bootstrap.log 2>&1
            hostname k8s-worker2
            echo "k8s-worker2"  >/etc/hostname
            yum install ksh telnet docker -y
            #### Validation of python3 & pip3
            test ! -f /usr/bin/python3 && yum install -y python3
            test ! -f /usr/bin/pip3 && yum install -y python3-pip
            #### Install Salt
            pip3 install salt
            #### Salt minion configuration
            mkdir -p /etc/salt/master.d /etc/salt/minion.d /srv/salt/base /etc/salt/pki/master
            echo "master: k8s-master" >/etc/salt/minion.d/master.conf
            D=$(date +%Y-%m-%d)
            AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null)
            AWS_DEFAULT_REGION=$(echo $AZ| sed 's/.$//g')
            export AWS_DEFAULT_REGION
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PrivateIpAddress,Tags[?Key==`Name`].Value|[0],LaunchTime,State.Name]' --output text|column -t|grep $D|grep running>/tmp/$$
            cat /tmp/$$|awk '{print $1, " " , $2}' >>/etc/hosts
            salt-minion -d
            #### Kubernetes Installation
            systemctl enable docker && systemctl start docker
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=0
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            exclude=kube*
            EOF
            cat <<EOF >  /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF
            sysctl --system
            yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
            systemctl enable kubelet && systemctl start kubelet
            echo "00 23 * * * /usr/sbin/poweroff" >>/var/spool/cron/root;systemctl restart crond
            echo "salt-minion -d" >/etc/rc5.d/S20salt
            chmod 755 /etc/rc5.d/S20salt;cp -p /etc/rc5.d/S20salt /etc/rc3.d/S20salt
            echo 'End of task'



  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${AWS::StackName}-SG"
      GroupDescription:
        Fn::Sub: "${AWS::StackName} SG"
      VpcId:
        Fn::ImportValue: MyVPCID
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  SGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
